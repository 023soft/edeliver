#!/usr/bin/env bash

# Pushes locally generated content to Github Pages.

STRATEGY_VARS="ROCCO_FILES"

# By default, we assume a rubygem structure where only lib has any code worth
# parsing.
if [ -z "$ROCCO_FILES" ]
then
  set -f # disables file globbing
  ROCCO_FILES="./**/*.rb"
  set +f # enables file globbing
fi

# This function must be present since deliver will call it directly
# Everything inside it or around it are only limited by your imagination : )
#
run() {
  __run 'generate'  "Generating rocco documentation"
  __run 'prepare'   "Preparing gh-pages branch"
  __run 'push'      "Pushing to remote"
  __run 'cleanup'   "Cleaning up"
}

# If there is a local bin/generate executable, it will run it,
# otherwise it will default to the standard rocco command.
# 
#
generate() {
  local generate_cmd="$APP_ROOT/bin/rocco"
  if [ -x $generate_cmd ]
  then
    $generate_cmd
  else
    set -f # disables file globbing
    __exec "bundle exec rocco -o gh-pages $ROCCO_FILES"
    set +f # enables file globbing
    __exec "cd gh-pages"
    __exec "find . -type d -depth 1 | while read dir
            do
              mv $dir/* .
              rm -fr $dir
            done
            "
    if [ -e "$APP.html" ]
    then
      __exec "mv $APP.html index.html"
    fi
  fi
}

# Ensure that we have gh-pages branch,
# Prep the locally generated content
#
prepare() {
  __exec "git symbolic-ref HEAD refs/heads/gh-pages"
  __exec "rm .git/index"
  __exec "git clean -fd"
  mv gh-pages/* .
  rm -fr gh-pages
}

# Move all files from the generated folder into root folder,
# commit and push
#
push() {
  git add .
  if [[ ! $(git status) =~ "nothing to commit" ]]; then
    __exec "git commit -a -m 'Re-generated rocco files"
    __exec "git push origin gh-pages"
  fi
}

cleanup() {
  __exec "git checkout -f master"
}
