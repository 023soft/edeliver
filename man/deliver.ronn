deliver(1) -- takes your code into production
=============================================

## SYNOPSIS
`deliver strategies` <br />
`deliver check` <br />
`deliver [-s strategy]` <br />

## DESCRIPTION
Deliver is a truly distributed deployment tool with no preferences for a
programming language or versioning system. It only cares about having enough
info in the shell environment to do its job. Why add Ruby or Python wrappers
when bash is the most obvious choice for the job?

Deliver has a single dependency: [GNU parallel] [1]. This is required so that
remote jobs can be executed on multiple hosts in parallel.

## RUNNING MODES
You can set a default mode via the MODE environment variable. The mode option
will overrwrite any environment variable. This is helpful when compact mode is
enough for most people on your team, yet some more technical users want to see
a more detailed output.

  * `-C`, `--compact` (or `MODE=compact`):
    _This is the default mode_. It will only show the description and progress of
    each running task, on a per-host basis. Both standard and error output will be
    silenced.

  * `-V`, `--verbose` (or `MODE=verbose`):
    Will not silence output of the running task. Great for troubleshooting or
    getting feedback from all tasks.

  * `-D`, `--debug` (or `MODE=debug`):
    Runs the entire script in standard shell debug mode, shows every line of
    bash that gets executed along with the task output. Well suited when writing
    your own strategies or customizing existing ones.

  * `-T`, `--test` (or `MODE=test`):
    Similar to a dry-run. Will output each command that is going to run with no
    local or remote changes. If you want full visibility into the final system
    commands that get generated, use this mode. You can even send the resulting
    commands to a file and run it, without even invoking deliver.  If you want to
    lock this down, add it to your repository and have everyone on your team use
    that when deploying.


## STRATEGIES
`deliver strategies` will list all available strategies. The default strategies
make certain assumptions, but they are fully modular and customizable.

  * `ruby`:
    [Foreman][2]-aware, uses upstart by default. Works seamlessly with
    [rvm][5]. _This is the default strategy_

  * `nodejs`:
    Heavily inspired by the ruby strategy, also foreman-aware, defaults to
    upstart.

  * `gh-pages`:
    How many times did you find yourself copying that rake task which generates
    and publishes to [github:pages][6] your project's [docco][3] or [rocco][4]?
    With deliver, just run `deliver -s gh-pages` from the app's root path.

### Customizing a default strategy?

### Creating a new strategy?


## CHECK
`deliver check` will ensure that everything is set up correctly. You can also
use this to see your final configuration.

## COPYRIGHT
Deliver is Copyright (C) 2012 [Gerhard Lazu][7].

[1]: http://www.gnu.org/software/parallel/man.html#description
[2]: https://github.com/ddollar/foreman
[3]: https://github.com/jashkenas/docco
[4]: https://github.com/rtomayko/rocco
[5]: https://rvm.io/
[6]: http://pages.github.com/
[7]: http://gerhardlazu.com

<!--
With no options, it will run in compact mode and will use the STRATEGY from
your runtime env, shell env or .deliver/config file. If you don't define a
strategy, it will use the ruby one by default.

If your specify a runtime strategy, this overwrite any subsequent configs:

  STRATEGY=gh-pages deliver

The above will use the gh-pages strategy, regardless of what you have
defined in your .deliver/config file or your shell env.

All settings respect the following priority (lower number takes precedence):

1. Runtime env
2. Shell env
3. Deliver config file

This becomes very helpful if you want to deploy your app to a local VM before
pushing to production. You can invoke deliver with runtime envs without any
modifications to your .deliver/config file:

  SERVER=ruby-1-localvm deliver

You can also deliver to multiple servers:

  SERVER=ruby-1-local,ruby-2-local deliver

When you're ready to update production, given that you already have the
correct servers defined in your .deliver/config file, run deliver without any
runtime variables.

At any point, you can test your deliver setup to see if everything is
configured correctly:
-->
