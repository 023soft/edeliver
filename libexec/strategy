#!/usr/bin/env bash

# Registers a new strategy in the global STRATEGIES array
# Publicly available
#
register_strategy() {
  STRATEGIES=("${STRATEGIES[@]}" "$txtbld\n$1$txtrst - $2")
}

# Displays the available strategies and exits cleanly
# It can't be called in this context, strategies are loaded later on in the runtime
#
__strategies() {
  if [[ $ARGS =~ (-s|--strategies) ]]; then
    __list_strategies
    exit 0
  fi
}

# List all available strategies
#
__list_strategies() {
  echo -e "${STRATEGIES[@]}\n"
}

# Loads the correct deliver strategy
#
__load_strategy_or_list_available_strategies() {
  local strategies_path=""

  # There are strategies that came with deliver itself...
  if [ -d "$BASE_PATH/strategies" ]; then
    strategies_path="$strategies_path $BASE_PATH/strategies"
  fi
  # You can now have a per-project strategy. I wanted to avoid a new
  # Capistrano, but this feature is super useful.If you have a private
  # strategy that can be open sourced, by all means, submit a pull request.
  if [ -d "$APP_ROOT/.deliver/strategies" ]; then
    strategies_path="$strategies_path $APP_ROOT/.deliver/strategies"
  fi

  # Find all files in both the public & private strategies folders
  local available_strategies=$(find $strategies_path -regex '^[a-zA-Z0-9/.-]*$' -type f ! -iname 'readme*')

  # This will leak function names in the global namespace, but I can't think of
  # a better way to register strategies
  for strategy in $available_strategies; do
    . "$strategy"
  done

  # This will display strategies and then exit if deliver was run with
  # -s|--strategies flag
  __strategies

  if [[ ! $available_strategies =~ $STRATEGY ]]; then
    error_message "\n'$STRATEGY' strategy does not exist. The available strategies are:"
    __list_strategies
    exit 1
  else
    for strategy in $available_strategies; do
      [[ ! $strategy =~ $STRATEGY ]] && continue
      . "$strategy" && break
    done
  fi
}
