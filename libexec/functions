#!/usr/bin/env bash

# If script doesn't run all the way to the end,
# it will exit 2 == SIGINT (Interrupt)
# http://steve-parker.org/sh/trap.shtml
#
complain_if_interrupted() {
  trap "exit 2" 1 2 3 13 15
}

# Something went very wrong, kill the script
#
error() {
  echo "$txtred$1$txtrst"
  exit 1
}

# If a command fails, fail the whole script
#
fail() {
  echo -e "$bldred FAIL $txtrst\n"
  exit 1
}

# Successful command
#
success() {
  echo "$bldgrn DONE $txtrst"
}

# Loads the .deliver file
#
load_app_config() {
  if [ ! -f $APP_CONFIG ]; then
    error "Could not find local .deliver"
  else
    . $APP_CONFIG
  fi
}

# Progress indicator when running commands in the background
#
progress() {
  local message=$1
  local style=${2:$txtwht}
  pid=$!

  echo -en "$style$message"

  while [ $(ps -eo pid | grep $pid) ]; do
    printf '.'
    sleep 0.5
  done

  # This is blocking
  # Try to actually benefit from the async nature of bg jobs
  wait $pid || fail
  status=$?

  if [ $status = 0 ]; then
    success
  else
    fail
  fi
}

# Start the output
start_output() {
  echo ""
}
# Ensure remote repository is set up correctly
# And that we have a local deploy branch pointing to the remote repository
#
check() {
  ssh $REMOTE "
    set -e
    if [ ! -d $DEPLOY_TO ]; then
      mkdir $DEPLOY_TO
      cd $DEPLOY_TO
      git init $SILENCE
      git config receive.denyCurrentBranch ignore
    fi
  "
  if [[ ! $(git remote -v) =~ "$REMOTE:$DEPLOY_TO" ]]; then
    [[ $(git remote -v) =~ 'deploy' ]] && git remote rm deploy
    git remote add deploy $REMOTE:$DEPLOY_TO
  fi
}

# Update remote repository
#
push() {
  eval "git push deploy master $SILENCE"
}

# Install/update all gems via bundler
# Export upstart jobs via foreman
#
setup() {
  ssh $REMOTE "
    set -e
    . .profile
    cd $DEPLOY_TO $SILENCE
    git reset --hard master $SILENCE
    rvm rvmrc trust $DEPLOY_TO $SILENCE
    cd $DEPLOY_TO $SILENCE
    bundle install --deployment --without development test $SILENCE
    bundle exec foreman export upstart tmp -u $USER -a $APP -p $PORT $SILENCE
  "
}

# Start the app via upstart
#
launch() {
  ssh $SERVER "
    set -e
    if [[ \$(sudo initctl list | awk '/'$APP' / { print \$0 }') =~ 'run' ]]; then
      sudo stop $APP $SILENCE
    fi
    sudo mv -f $DEPLOY_TO/tmp/*conf /etc/init/
    sudo start $APP $SILENCE
  "
}

# Deploy was a success!
#
finalize() {
  echo "$bldgrn"
  echo "$APP deployed" | tr '[:lower:]' '[:upper:]'
  echo "$txtrst"
}

# Wrapper to either run the commands verbosely or silently
#
run() {
  if [ $VERBOSE ]; then
    echo -e "$bldylw\n$2$txtrst"
    eval $1
  else
    (eval $1) &
    progress "$2"
  fi
}
